{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Input, Output, NgModule, Optional } from '@angular/core';\nimport { Chart, registerables, defaults } from 'chart.js';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { merge } from 'lodash-es';\nimport { BehaviorSubject } from 'rxjs';\n\nclass ThemeService {\n  constructor() {\n    this.colorschemesOptions = new BehaviorSubject(undefined);\n  }\n\n  setColorschemesOptions(options) {\n    this.pColorschemesOptions = options;\n    this.colorschemesOptions.next(options);\n  }\n\n  getColorschemesOptions() {\n    return this.pColorschemesOptions;\n  }\n\n}\n\nThemeService.ɵfac = function ThemeService_Factory(t) {\n  return new (t || ThemeService)();\n};\n\nThemeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ThemeService,\n  factory: ThemeService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ThemeService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass BaseChartDirective {\n  constructor(element, zone, themeService) {\n    this.zone = zone;\n    this.themeService = themeService;\n    this.type = 'bar';\n    this.plugins = [];\n    this.chartClick = new EventEmitter();\n    this.chartHover = new EventEmitter();\n    this.subs = [];\n    this.ctx = element.nativeElement.getContext('2d');\n    this.subs.push(this.themeService.colorschemesOptions.pipe(distinctUntilChanged()).subscribe(r => this.themeChanged(r)));\n  }\n\n  ngOnChanges(changes) {\n    const requireRender = ['type'];\n    const propertyNames = Object.getOwnPropertyNames(changes);\n\n    if (propertyNames.some(key => requireRender.includes(key)) || propertyNames.every(key => changes[key].isFirstChange())) {\n      this.render();\n    } else {\n      const config = this.getChartConfiguration();\n\n      if (this.chart) {\n        Object.assign(this.chart.config.data, config.data);\n\n        if (this.chart.config.plugins) {\n          Object.assign(this.chart.config.plugins, config.plugins);\n        }\n\n        if (this.chart.config.options) {\n          Object.assign(this.chart.config.options, config.options);\n        }\n      }\n\n      this.update();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n      this.chart = void 0;\n    }\n\n    this.subs.forEach(s => s.unsubscribe());\n  }\n\n  render() {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n\n    Chart.register(...this.plugins);\n    return this.zone.runOutsideAngular(() => this.chart = new Chart(this.ctx, this.getChartConfiguration()));\n  }\n\n  update(duration) {\n    if (this.chart) {\n      this.zone.runOutsideAngular(() => {\n        var _a;\n\n        return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.update(duration);\n      });\n    }\n  }\n\n  hideDataset(index, hidden) {\n    if (this.chart) {\n      this.chart.getDatasetMeta(index).hidden = hidden;\n      this.update();\n    }\n  }\n\n  isDatasetHidden(index) {\n    var _a, _b;\n\n    return (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.getDatasetMeta(index)) === null || _b === void 0 ? void 0 : _b.hidden;\n  }\n\n  toBase64Image() {\n    var _a;\n\n    return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.toBase64Image();\n  }\n\n  themeChanged(options) {\n    this.themeOverrides = options;\n\n    if (this.chart) {\n      if (this.chart.config.options) {\n        Object.assign(this.chart.config.options, this.getChartOptions());\n      }\n\n      this.update();\n    }\n  }\n\n  getChartOptions() {\n    return merge({\n      onHover: (event, active) => {\n        var _a;\n\n        if (!this.chartHover.observed && !((_a = this.chartHover.observers) === null || _a === void 0 ? void 0 : _a.length)) {\n          return;\n        }\n\n        this.zone.run(() => this.chartHover.emit({\n          event,\n          active\n        }));\n      },\n      onClick: (event, active) => {\n        var _a;\n\n        if (!this.chartClick.observed && !((_a = this.chartClick.observers) === null || _a === void 0 ? void 0 : _a.length)) {\n          return;\n        }\n\n        this.zone.run(() => this.chartClick.emit({\n          event,\n          active\n        }));\n      }\n    }, this.themeOverrides, this.options, {\n      plugins: {\n        legend: {\n          display: this.legend\n        }\n      }\n    });\n  }\n\n  getChartConfiguration() {\n    return {\n      type: this.type,\n      data: this.getChartData(),\n      options: this.getChartOptions()\n    };\n  }\n\n  getChartData() {\n    return this.data ? this.data : {\n      labels: this.labels || [],\n      datasets: this.datasets || []\n    };\n  }\n\n}\n\nBaseChartDirective.ɵfac = function BaseChartDirective_Factory(t) {\n  return new (t || BaseChartDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(ThemeService));\n};\n\nBaseChartDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BaseChartDirective,\n  selectors: [[\"canvas\", \"baseChart\", \"\"]],\n  inputs: {\n    type: \"type\",\n    legend: \"legend\",\n    data: \"data\",\n    options: \"options\",\n    plugins: \"plugins\",\n    labels: \"labels\",\n    datasets: \"datasets\"\n  },\n  outputs: {\n    chartClick: \"chartClick\",\n    chartHover: \"chartHover\"\n  },\n  exportAs: [\"base-chart\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseChartDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: 'canvas[baseChart]',\n      exportAs: 'base-chart'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: ThemeService\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    plugins: [{\n      type: Input\n    }],\n    labels: [{\n      type: Input\n    }],\n    datasets: [{\n      type: Input\n    }],\n    chartClick: [{\n      type: Output\n    }],\n    chartHover: [{\n      type: Output\n    }]\n  });\n})();\n\nconst baseColors = [[255, 99, 132], [54, 162, 235], [255, 206, 86], [231, 233, 237], [75, 192, 192], [151, 187, 205], [220, 220, 220], [247, 70, 74], [70, 191, 189], [253, 180, 92], [148, 159, 177], [77, 83, 96]];\nconst builtInDefaults = {\n  datasets: {\n    line: {\n      backgroundColor: context => rgba(generateColor(context.datasetIndex), 0.4),\n      borderColor: context => rgba(generateColor(context.datasetIndex), 1),\n      pointBackgroundColor: context => rgba(generateColor(context.datasetIndex), 1),\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: context => rgba(generateColor(context.datasetIndex), 0.8)\n    },\n    bar: {\n      backgroundColor: context => rgba(generateColor(context.datasetIndex), 0.6),\n      borderColor: context => rgba(generateColor(context.datasetIndex), 1),\n      hoverBackgroundColor: context => rgba(generateColor(context.datasetIndex), 0.8),\n      hoverBorderColor: context => rgba(generateColor(context.datasetIndex), 1)\n    },\n\n    get radar() {\n      return this.line;\n    },\n\n    doughnut: {\n      backgroundColor: context => rgba(generateColor(context.dataIndex), 0.6),\n      borderColor: '#fff',\n      hoverBackgroundColor: context => rgba(generateColor(context.dataIndex), 1),\n      hoverBorderColor: context => rgba(generateColor(context.dataIndex), 1)\n    },\n\n    get pie() {\n      return this.doughnut;\n    },\n\n    polarArea: {\n      backgroundColor: context => rgba(generateColor(context.dataIndex), 0.6),\n      borderColor: context => rgba(generateColor(context.dataIndex), 1),\n      hoverBackgroundColor: context => rgba(generateColor(context.dataIndex), 0.8),\n      hoverBorderColor: context => rgba(generateColor(context.dataIndex), 1)\n    },\n\n    get bubble() {\n      return this.doughnut;\n    },\n\n    get scatter() {\n      return this.doughnut;\n    },\n\n    get area() {\n      return this.polarArea;\n    }\n\n  }\n};\n\nfunction rgba(colour, alpha) {\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomColor() {\n  return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\r\n * Generate colors\r\n */\n\n\nfunction generateColor(index = 0) {\n  return baseColors[index] || getRandomColor();\n}\n\nclass NgChartsConfiguration {}\n\nNgChartsConfiguration.ɵfac = function NgChartsConfiguration_Factory(t) {\n  return new (t || NgChartsConfiguration)();\n};\n\nNgChartsConfiguration.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgChartsConfiguration,\n  factory: NgChartsConfiguration.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgChartsConfiguration, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nChart.register(...registerables);\n\nclass NgChartsModule {\n  constructor(config) {\n    if (config === null || config === void 0 ? void 0 : config.plugins) Chart.register(...(config === null || config === void 0 ? void 0 : config.plugins));\n    const ngChartsDefaults = merge(builtInDefaults, (config === null || config === void 0 ? void 0 : config.defaults) || {});\n    defaults.set(ngChartsDefaults);\n  }\n\n  static forRoot(config) {\n    return {\n      ngModule: NgChartsModule,\n      providers: [{\n        provide: NgChartsConfiguration,\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nNgChartsModule.ɵfac = function NgChartsModule_Factory(t) {\n  return new (t || NgChartsModule)(i0.ɵɵinject(NgChartsConfiguration, 8));\n};\n\nNgChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgChartsModule\n});\nNgChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgChartsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [BaseChartDirective],\n      exports: [BaseChartDirective]\n    }]\n  }], function () {\n    return [{\n      type: NgChartsConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/*\r\n * Public API Surface of ng2-charts\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { BaseChartDirective, NgChartsConfiguration, NgChartsModule, ThemeService, baseColors };","map":{"version":3,"sources":["C:/Users/luism/OneDrive/Escritorio/Casa Abierta/Nueva carpeta/admin-casa-abierta/node_modules/ng2-charts/fesm2015/ng2-charts.mjs"],"names":["i0","Injectable","EventEmitter","Directive","Input","Output","NgModule","Optional","Chart","registerables","defaults","distinctUntilChanged","merge","BehaviorSubject","ThemeService","constructor","colorschemesOptions","undefined","setColorschemesOptions","options","pColorschemesOptions","next","getColorschemesOptions","ɵfac","ɵprov","type","args","providedIn","BaseChartDirective","element","zone","themeService","plugins","chartClick","chartHover","subs","ctx","nativeElement","getContext","push","pipe","subscribe","r","themeChanged","ngOnChanges","changes","requireRender","propertyNames","Object","getOwnPropertyNames","some","key","includes","every","isFirstChange","render","config","getChartConfiguration","chart","assign","data","update","ngOnDestroy","destroy","forEach","s","unsubscribe","register","runOutsideAngular","duration","_a","hideDataset","index","hidden","getDatasetMeta","isDatasetHidden","_b","toBase64Image","themeOverrides","getChartOptions","onHover","event","active","observed","observers","length","run","emit","onClick","legend","display","getChartData","labels","datasets","ElementRef","NgZone","ɵdir","selector","exportAs","baseColors","builtInDefaults","line","backgroundColor","context","rgba","generateColor","datasetIndex","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","bar","hoverBackgroundColor","hoverBorderColor","radar","doughnut","dataIndex","pie","polarArea","bubble","scatter","area","colour","alpha","concat","join","getRandomInt","min","max","Math","floor","random","getRandomColor","NgChartsConfiguration","NgChartsModule","ngChartsDefaults","set","forRoot","ngModule","providers","provide","useValue","ɵmod","ɵinj","imports","declarations","exports","decorators"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\r\nimport { Injectable, EventEmitter, Directive, Input, Output, NgModule, Optional } from '@angular/core';\r\nimport { Chart, registerables, defaults } from 'chart.js';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { merge } from 'lodash-es';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nclass ThemeService {\r\n    constructor() {\r\n        this.colorschemesOptions = new BehaviorSubject(undefined);\r\n    }\r\n    setColorschemesOptions(options) {\r\n        this.pColorschemesOptions = options;\r\n        this.colorschemesOptions.next(options);\r\n    }\r\n    getColorschemesOptions() {\r\n        return this.pColorschemesOptions;\r\n    }\r\n}\r\nThemeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ThemeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nThemeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ThemeService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ThemeService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\r\n\r\nclass BaseChartDirective {\r\n    constructor(element, zone, themeService) {\r\n        this.zone = zone;\r\n        this.themeService = themeService;\r\n        this.type = 'bar';\r\n        this.plugins = [];\r\n        this.chartClick = new EventEmitter();\r\n        this.chartHover = new EventEmitter();\r\n        this.subs = [];\r\n        this.ctx = element.nativeElement.getContext('2d');\r\n        this.subs.push(this.themeService.colorschemesOptions\r\n            .pipe(distinctUntilChanged())\r\n            .subscribe(r => this.themeChanged(r)));\r\n    }\r\n    ngOnChanges(changes) {\r\n        const requireRender = ['type'];\r\n        const propertyNames = Object.getOwnPropertyNames(changes);\r\n        if (propertyNames.some(key => requireRender.includes(key)) ||\r\n            propertyNames.every(key => changes[key].isFirstChange())) {\r\n            this.render();\r\n        }\r\n        else {\r\n            const config = this.getChartConfiguration();\r\n            if (this.chart) {\r\n                Object.assign(this.chart.config.data, config.data);\r\n                if (this.chart.config.plugins) {\r\n                    Object.assign(this.chart.config.plugins, config.plugins);\r\n                }\r\n                if (this.chart.config.options) {\r\n                    Object.assign(this.chart.config.options, config.options);\r\n                }\r\n            }\r\n            this.update();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.chart) {\r\n            this.chart.destroy();\r\n            this.chart = void 0;\r\n        }\r\n        this.subs.forEach(s => s.unsubscribe());\r\n    }\r\n    render() {\r\n        if (this.chart) {\r\n            this.chart.destroy();\r\n        }\r\n        Chart.register(...this.plugins);\r\n        return this.zone.runOutsideAngular(() => this.chart = new Chart(this.ctx, this.getChartConfiguration()));\r\n    }\r\n    update(duration) {\r\n        if (this.chart) {\r\n            this.zone.runOutsideAngular(() => { var _a; return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.update(duration); });\r\n        }\r\n    }\r\n    hideDataset(index, hidden) {\r\n        if (this.chart) {\r\n            this.chart.getDatasetMeta(index).hidden = hidden;\r\n            this.update();\r\n        }\r\n    }\r\n    isDatasetHidden(index) {\r\n        var _a, _b;\r\n        return (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.getDatasetMeta(index)) === null || _b === void 0 ? void 0 : _b.hidden;\r\n    }\r\n    toBase64Image() {\r\n        var _a;\r\n        return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.toBase64Image();\r\n    }\r\n    themeChanged(options) {\r\n        this.themeOverrides = options;\r\n        if (this.chart) {\r\n            if (this.chart.config.options) {\r\n                Object.assign(this.chart.config.options, this.getChartOptions());\r\n            }\r\n            this.update();\r\n        }\r\n    }\r\n    getChartOptions() {\r\n        return merge({\r\n            onHover: (event, active) => {\r\n                var _a;\r\n                if (!this.chartHover.observed && !((_a = this.chartHover.observers) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                    return;\r\n                }\r\n                this.zone.run(() => this.chartHover.emit({ event, active }));\r\n            },\r\n            onClick: (event, active) => {\r\n                var _a;\r\n                if (!this.chartClick.observed && !((_a = this.chartClick.observers) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                    return;\r\n                }\r\n                this.zone.run(() => this.chartClick.emit({ event, active }));\r\n            }\r\n        }, this.themeOverrides, this.options, {\r\n            plugins: {\r\n                legend: {\r\n                    display: this.legend\r\n                }\r\n            }\r\n        });\r\n    }\r\n    getChartConfiguration() {\r\n        return {\r\n            type: this.type,\r\n            data: this.getChartData(),\r\n            options: this.getChartOptions()\r\n        };\r\n    }\r\n    getChartData() {\r\n        return this.data ? this.data : {\r\n            labels: this.labels || [],\r\n            datasets: this.datasets || []\r\n        };\r\n    }\r\n}\r\nBaseChartDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: BaseChartDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: ThemeService }], target: i0.ɵɵFactoryTarget.Directive });\r\nBaseChartDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.11\", type: BaseChartDirective, selector: \"canvas[baseChart]\", inputs: { type: \"type\", legend: \"legend\", data: \"data\", options: \"options\", plugins: \"plugins\", labels: \"labels\", datasets: \"datasets\" }, outputs: { chartClick: \"chartClick\", chartHover: \"chartHover\" }, exportAs: [\"base-chart\"], usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: BaseChartDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    // eslint-disable-next-line @angular-eslint/directive-selector\r\n                    selector: 'canvas[baseChart]',\r\n                    exportAs: 'base-chart',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: ThemeService }]; }, propDecorators: { type: [{\r\n                type: Input\r\n            }], legend: [{\r\n                type: Input\r\n            }], data: [{\r\n                type: Input\r\n            }], options: [{\r\n                type: Input\r\n            }], plugins: [{\r\n                type: Input\r\n            }], labels: [{\r\n                type: Input\r\n            }], datasets: [{\r\n                type: Input\r\n            }], chartClick: [{\r\n                type: Output\r\n            }], chartHover: [{\r\n                type: Output\r\n            }] } });\r\n\r\nconst baseColors = [\r\n    [255, 99, 132],\r\n    [54, 162, 235],\r\n    [255, 206, 86],\r\n    [231, 233, 237],\r\n    [75, 192, 192],\r\n    [151, 187, 205],\r\n    [220, 220, 220],\r\n    [247, 70, 74],\r\n    [70, 191, 189],\r\n    [253, 180, 92],\r\n    [148, 159, 177],\r\n    [77, 83, 96]\r\n];\r\n\r\nconst builtInDefaults = {\r\n    datasets: {\r\n        line: {\r\n            backgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.4),\r\n            borderColor: (context) => rgba(generateColor(context.datasetIndex), 1),\r\n            pointBackgroundColor: (context) => rgba(generateColor(context.datasetIndex), 1),\r\n            pointBorderColor: '#fff',\r\n            pointHoverBackgroundColor: '#fff',\r\n            pointHoverBorderColor: (context) => rgba(generateColor(context.datasetIndex), 0.8)\r\n        },\r\n        bar: {\r\n            backgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.6),\r\n            borderColor: (context) => rgba(generateColor(context.datasetIndex), 1),\r\n            hoverBackgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.8),\r\n            hoverBorderColor: (context) => rgba(generateColor(context.datasetIndex), 1)\r\n        },\r\n        get radar() {\r\n            return this.line;\r\n        },\r\n        doughnut: {\r\n            backgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.6),\r\n            borderColor: '#fff',\r\n            hoverBackgroundColor: (context) => rgba(generateColor(context.dataIndex), 1),\r\n            hoverBorderColor: (context) => rgba(generateColor(context.dataIndex), 1)\r\n        },\r\n        get pie() {\r\n            return this.doughnut;\r\n        },\r\n        polarArea: {\r\n            backgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.6),\r\n            borderColor: (context) => rgba(generateColor(context.dataIndex), 1),\r\n            hoverBackgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.8),\r\n            hoverBorderColor: (context) => rgba(generateColor(context.dataIndex), 1)\r\n        },\r\n        get bubble() {\r\n            return this.doughnut;\r\n        },\r\n        get scatter() {\r\n            return this.doughnut;\r\n        },\r\n        get area() {\r\n            return this.polarArea;\r\n        }\r\n    }\r\n};\r\nfunction rgba(colour, alpha) {\r\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\r\n}\r\nfunction getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\nfunction getRandomColor() {\r\n    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\r\n}\r\n/**\r\n * Generate colors\r\n */\r\nfunction generateColor(index = 0) {\r\n    return baseColors[index] || getRandomColor();\r\n}\r\n\r\nclass NgChartsConfiguration {\r\n}\r\nNgChartsConfiguration.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsConfiguration, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nNgChartsConfiguration.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsConfiguration, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsConfiguration, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }] });\r\nChart.register(...registerables);\r\nclass NgChartsModule {\r\n    constructor(config) {\r\n        if (config === null || config === void 0 ? void 0 : config.plugins)\r\n            Chart.register(...config === null || config === void 0 ? void 0 : config.plugins);\r\n        const ngChartsDefaults = merge(builtInDefaults, (config === null || config === void 0 ? void 0 : config.defaults) || {});\r\n        defaults.set(ngChartsDefaults);\r\n    }\r\n    static forRoot(config) {\r\n        return {\r\n            ngModule: NgChartsModule,\r\n            providers: [\r\n                { provide: NgChartsConfiguration, useValue: config }\r\n            ]\r\n        };\r\n    }\r\n}\r\nNgChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsModule, deps: [{ token: NgChartsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsModule, declarations: [BaseChartDirective], exports: [BaseChartDirective] });\r\nNgChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsModule, imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [],\r\n                    declarations: [BaseChartDirective],\r\n                    exports: [BaseChartDirective]\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: NgChartsConfiguration, decorators: [{\r\n                        type: Optional\r\n                    }] }];\r\n    } });\r\n\r\n/*\r\n * Public API Surface of ng2-charts\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { BaseChartDirective, NgChartsConfiguration, NgChartsModule, ThemeService, baseColors };\r\n\n"]},"metadata":{},"sourceType":"module"}